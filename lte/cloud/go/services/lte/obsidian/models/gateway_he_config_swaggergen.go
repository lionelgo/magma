// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayHeConfig Header Enrichment configuration
// swagger:model gateway_he_config
type GatewayHeConfig struct {

	// True if headers should be encrypted
	// Required: true
	EnableEncryption bool `json:"enable_encryption"`

	// True if header enrichment feature should be disabled for gateway
	// Required: true
	EnableHeaderEnrichment bool `json:"enable_header_enrichment"`

	// he encoding type
	// Required: true
	// Enum: [BASE64]
	HeEncodingType string `json:"he_encoding_type"`

	// he encryption algorithm
	// Required: true
	// Enum: [RC4]
	HeEncryptionAlgorithm string `json:"he_encryption_algorithm"`

	// he hash function
	// Required: true
	// Enum: [MD5]
	HeHashFunction string `json:"he_hash_function"`
}

// Validate validates this gateway he config
func (m *GatewayHeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableHeaderEnrichment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeEncodingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeEncryptionAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeHashFunction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayHeConfig) validateEnableEncryption(formats strfmt.Registry) error {

	if err := validate.Required("enable_encryption", "body", bool(m.EnableEncryption)); err != nil {
		return err
	}

	return nil
}

func (m *GatewayHeConfig) validateEnableHeaderEnrichment(formats strfmt.Registry) error {

	if err := validate.Required("enable_header_enrichment", "body", bool(m.EnableHeaderEnrichment)); err != nil {
		return err
	}

	return nil
}

var gatewayHeConfigTypeHeEncodingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BASE64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayHeConfigTypeHeEncodingTypePropEnum = append(gatewayHeConfigTypeHeEncodingTypePropEnum, v)
	}
}

const (

	// GatewayHeConfigHeEncodingTypeBASE64 captures enum value "BASE64"
	GatewayHeConfigHeEncodingTypeBASE64 string = "BASE64"
)

// prop value enum
func (m *GatewayHeConfig) validateHeEncodingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayHeConfigTypeHeEncodingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayHeConfig) validateHeEncodingType(formats strfmt.Registry) error {

	if err := validate.RequiredString("he_encoding_type", "body", string(m.HeEncodingType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateHeEncodingTypeEnum("he_encoding_type", "body", m.HeEncodingType); err != nil {
		return err
	}

	return nil
}

var gatewayHeConfigTypeHeEncryptionAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RC4"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayHeConfigTypeHeEncryptionAlgorithmPropEnum = append(gatewayHeConfigTypeHeEncryptionAlgorithmPropEnum, v)
	}
}

const (

	// GatewayHeConfigHeEncryptionAlgorithmRC4 captures enum value "RC4"
	GatewayHeConfigHeEncryptionAlgorithmRC4 string = "RC4"
)

// prop value enum
func (m *GatewayHeConfig) validateHeEncryptionAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayHeConfigTypeHeEncryptionAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayHeConfig) validateHeEncryptionAlgorithm(formats strfmt.Registry) error {

	if err := validate.RequiredString("he_encryption_algorithm", "body", string(m.HeEncryptionAlgorithm)); err != nil {
		return err
	}

	// value enum
	if err := m.validateHeEncryptionAlgorithmEnum("he_encryption_algorithm", "body", m.HeEncryptionAlgorithm); err != nil {
		return err
	}

	return nil
}

var gatewayHeConfigTypeHeHashFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MD5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayHeConfigTypeHeHashFunctionPropEnum = append(gatewayHeConfigTypeHeHashFunctionPropEnum, v)
	}
}

const (

	// GatewayHeConfigHeHashFunctionMD5 captures enum value "MD5"
	GatewayHeConfigHeHashFunctionMD5 string = "MD5"
)

// prop value enum
func (m *GatewayHeConfig) validateHeHashFunctionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayHeConfigTypeHeHashFunctionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayHeConfig) validateHeHashFunction(formats strfmt.Registry) error {

	if err := validate.RequiredString("he_hash_function", "body", string(m.HeHashFunction)); err != nil {
		return err
	}

	// value enum
	if err := m.validateHeHashFunctionEnum("he_hash_function", "body", m.HeHashFunction); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayHeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayHeConfig) UnmarshalBinary(b []byte) error {
	var res GatewayHeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
