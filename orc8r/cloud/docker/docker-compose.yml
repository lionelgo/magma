version: "3.7"

# NOTE: x-orc8r is somewhat replicated to the per-module docker-compose files.
# Please keep it in sync.
x-orc8r_service: &orc8r_service
  image: orc8r_base
  volumes:
    - $PWD/../../../.cache/test_certs:/var/opt/magma/certs
  environment:
    TEST_MODE: "1"  # Run dev scripts on startup
    SERVICE_HOSTNAME: localhost  # All services are reachable through localhost
    SERVICE_REGISTRY_MODE: docker
    SQL_DRIVER: postgres
    DATABASE_SOURCE: dbname=magma_dev user=magma_dev password=magma_dev host=postgres sslmode=disable
    SQL_DIALECT: psql
    # To use MariaDB, use these connection parameters instead:
    # SQL_DRIVER: mysql
    # DATABASE_SOURCE: "magma_dev:magma_dev@(maria)/magma_dev"
    # SQL_DIALECT: maria
  links:
    - fluentd
  depends_on:
    - fluentd
    - postgres  # or maria -- though will need to change other occurrences of postgres
  restart: always
  # If you want to use log aggregation on a Mac or Windows host, uncomment
  # the below block as-is
  # KP: host.docker.internal does not resolve to anything in Docker for linux
  # See https://github.com/docker/for-linux/issues/264 and
  # https://github.com/docker/libnetwork/pull/2348
  # If you're on a Linux host and want to use log aggregation, uncomment the
  # below block and update fluentd-address to ":24225". You will have to
  # restart the container before it sends logs to fluentd.
  # See https://github.com/moby/moby/issues/1143 for some ideas about
  # connecting the logging driver to your host localhost.
#    logging:
#      driver: fluentd
#      options:
#        fluentd-address: "host.docker.internal:24225"
#        tag: orc8r.controller
#        fluentd-retry-wait: "1s"
#        fluentd-max-retries: "120"

services:
  # Legacy controller service
  controller:
    volumes:
      - $PWD/../../../.cache/test_certs:/var/opt/magma/certs
    environment:
      TEST_MODE: "1"  # Run dev scripts on startup
      SERVICE_HOSTNAME: localhost  # All services are reachable through localhost
      SQL_DRIVER: postgres
      DATABASE_SOURCE: "dbname=magma_dev user=magma_dev password=magma_dev host=postgres sslmode=disable"
      SQL_DIALECT: psql
      SERVICE_REGISTRY_MODE: yaml
    links:
      - fluentd
    depends_on:
      - postgres
      - fluentd
    command: ["/bin/sh", "-c", "/usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 && /usr/bin/supervisord"]
    restart: always

  orchestrator:
    <<: *orc8r_service
    build:
      context: /tmp/magma_orc8r_build
      dockerfile: $PWD/Dockerfile
    depends_on:
      # Run-once
      - dev_setup
      # Orc8r services
      - accessd
      - bootstrapper
      - certifier
      - configurator
      - device
      - directoryd
      - dispatcher
      - metricsd
      - obsidian
      - service_registry
      - state
      - streamer
      - tenants
      # Non-core essentials
      - fluentd
      - postgres
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/orchestrator -run_echo_server=true -logtostderr=true -v=0

  accessd:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/accessd -logtostderr=true -v=0

  bootstrapper:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/bootstrapper -cak=/var/opt/magma/certs/bootstrapper.key -logtostderr=true -v=0

  configurator:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/configurator -logtostderr=true -v=0

  dev_setup:
    <<: *orc8r_service
    restart: "no"
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/local/bin/create_test_controller_certs

  device:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/device -logtostderr=true -v=0

  certifier:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/certifier -cac=/var/opt/magma/certs/certifier.pem -cak /var/opt/magma/certs/certifier.key -vpnc=/var/opt/magma/certs/vpn_ca.crt -vpnk=/var/opt/magma/certs/vpn_ca.key -logtostderr=true -v=0

  directoryd:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/directoryd -logtostderr=true -v=0

  dispatcher:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/dispatcher -logtostderr=true -v=0

  metricsd:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/metricsd -run_echo_server=true -logtostderr=true -v=0

  obsidian:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/obsidian -logtostderr=true -v=0

  service_registry:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/service_registry -logtostderr=true -v=0

  state:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/state -logtostderr=true -v=0

  streamer:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/streamer -logtostderr=true -v=0

  tenants:
    <<: *orc8r_service
    command:
      - /bin/sh
      - -c
      - >
        /usr/local/bin/wait-for-it.sh -s -t 30 postgres:5432 &&
        /usr/bin/envdir /var/opt/magma/envdir /var/opt/magma/bin/tenants -run_echo_server=true -logtostderr=true -v=0

  # Non-core essential services

  postgres:
    image: postgres
    ports:
      - 5432:5432/tcp
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: magma_dev
      POSTGRES_PASSWORD: magma_dev
      POSTGRES_DB: magma_dev
    restart: always

  maria:
    image: mariadb:10.2
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: magma
      MYSQL_DATABASE: magma_dev
      MYSQL_USER: magma_dev
      MYSQL_PASSWORD: magma_dev
      SQL_MODE: ANSI_QUOTES
    command: mysqld --sql_mode="ANSI_QUOTES"
    restart: always

  nginx:
    ports:
      - 7443:8443/tcp   # controller gRPC port
      - 7444:8444/tcp   # bootstrapper port
      - 9443:9443/tcp   # API port
    volumes:
      - $PWD/../../../.cache/test_certs:/var/opt/magma/certs
    environment:
      CONTROLLER_HOSTNAME: controller.magma.test
      PROXY_BACKENDS: controller
      TEST_MODE: "1"
      RESOLVER: 127.0.0.11
    restart: always
#    logging:
#      driver: fluentd
#      options:
#        fluentd-address: "host.docker.internal:24225"
#        tag: orc8r.nginx
#        fluentd-retry-wait: "1s"
#        fluentd-max-retries: "120"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:7.3.1
    ports:
      - 5601:5601
    links:
      - elasticsearch

  fluentd:
    build: ./fluentd
    container_name: fluentd
    links:
      - elasticsearch
    # 24224 for TLS secure forwarding, 24225 for unsecured docker logging
    ports:
      - 24224:24224
      - 24224:24224/udp
      - 24225:24225
      - 24225:24225/udp
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - $PWD/../../../.cache/test_certs:/var/opt/magma/certs

volumes:
  pgdata:
  mysql:
  elasticsearch:
